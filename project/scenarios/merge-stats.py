import json
import os
import sys

mergename = sys.argv[1]
folder_name = 'results/' + mergename

testbed = False

fragments = sorted(os.listdir(folder_name))

# for fragment in fragments:
#     fragname = fragment.split('.')[0]
#     print("Analyzing the following files: ")
#     print("Folder name: " + fragment)
#     print("Energest: " + fragname + "-energest-merge.csv")
#     print("Results: " + fragname + "-results.log")
#     print("DC: " + fragname + "-dc.csv")

# Results
results = {
    "avg_duty_cycle": [],
    "std_dev": [],
    "min_duty_cycle": [],
    "max_duty_cycle": [],
    "events_at_controller": [],
    "collected_rounds_at_controller": [],
    "failed_events": [],
    "collect_pdr": [],
    "commands_gen_controller": [],
    "commands_recv_actuator": [],
    "avg_actuation_pdr": [],
    "sensor2-pdr": [],
    "sensor3-pdr": [],
    "sensor4-pdr": [],
    "sensor5-pdr": [],
    "sensor6-pdr": [],
}

for fragment in fragments:
    fragname = fragment.split('.')[0]
    with open(folder_name + "/" + fragname + "/" + fragname + "-results.log", 'r') as f:
        for line in f:
            if "AVERAGE DUTY CYCLE" in line:
                # Line: AVERAGE DUTY CYCLE: 1.819%
                duty_cycle = line.split(':')[1].strip().split('%')[0]
                results["avg_duty_cycle"].append(float(duty_cycle))
            elif "STANDARD DEVIATION" in line:
                # Line: STANDARD DEVIATION: 0.735
                std_dev = line.split(':')[1].strip()
                results["std_dev"].append(float(std_dev))
            elif "MINIMUM:" in line:
                # Line: MINIMUM: 1.077%
                min_duty_cycle = line.split(':')[1].strip().split('%')[0]
                results["min_duty_cycle"].append(float(min_duty_cycle))
            elif "MAXIMUM:" in line:
                # Line: MAXIMUM: 1.819%
                max_duty_cycle = line.split(':')[1].strip().split('%')[0]
                results["max_duty_cycle"].append(float(max_duty_cycle))
            elif "EVENTS AT CONTROLLER" in line:
                # Line: EVENTS AT CONTROLLER: 4
                events_at_controller = line.split(':')[1].strip()
                results["events_at_controller"].append(int(events_at_controller))
            elif "COLLECT ROUNDS AT CONTROLLER" in line:
                # Line: COLLECT ROUNDS AT CONTROLLER: 4
                collected_rounds_at_controller = line.split(':')[1].strip()
                results["collected_rounds_at_controller"].append(int(collected_rounds_at_controller))
            elif "FAILED EVENTS" in line:
                # Line: FAILED EVENTS: 0
                failed_events = line.split(':')[1].strip()
                results["failed_events"].append(int(failed_events))
            elif "COLLECT PDR" in line:
                # Line: COLLECT PDR: 0.000
                collect_pdr = line.split(':')[1].strip()
                results["collect_pdr"].append(float(collect_pdr))
            elif "COMMANDS GENERATED BY THE CONTROLLER" in line:
                # Line: COMMANDS GENERATED BY THE CONTROLLER: 0
                commands_gen_controller = line.split(':')[1].strip()
                results["commands_gen_controller"].append(int(commands_gen_controller))
            elif "COMMANDS RECEIVED BY ACTUATORS" in line:
                # Line: COMMANDS RECEIVED BY ACTUATORS: 0
                commands_recv_actuator = line.split(':')[1].strip()
                results["commands_recv_actuator"].append(int(commands_recv_actuator))
            elif "AVERAGE ACTUATION PDR" in line:
                # Line: AVERAGE ACTUATION PDR: 0.000
                avg_actuation_pdr = line.split(':')[1].strip()
                results["avg_actuation_pdr"].append(float(avg_actuation_pdr))
            elif "SENSOR 02:00 -- ACTUATION PDR" in line or "SENSOR f2:33 -- ACTUATION PDR" in line:
                # Line: SENSOR 02:00 -- ACTUATION PDR: 0.000
                sensor2_pdr = line.split(':')[2].strip()
                results["sensor2-pdr"].append(float(sensor2_pdr))
            elif "SENSOR 03:00 -- ACTUATION PDR" in line or "SENSOR f3:84 -- ACTUATION PDR" in line:
                # Line: SENSOR 03:00 -- ACTUATION PDR: 0.000
                sensor3_pdr = line.split(':')[2].strip()
                results["sensor3-pdr"].append(float(sensor3_pdr))
            elif "SENSOR 04:00 -- ACTUATION PDR" in line or "SENSOR f3:88 -- ACTUATION PDR" in line:
                # Line: SENSOR 04:00 -- ACTUATION PDR: 0.000
                sensor4_pdr = line.split(':')[2].strip()
                results["sensor4-pdr"].append(float(sensor4_pdr))
            elif "SENSOR 05:00 -- ACTUATION PDR" in line or "SENSOR f3:8b -- ACTUATION PDR" in line:
                # Line: SENSOR 05:00 -- ACTUATION PDR: 0.000
                sensor5_pdr = line.split(':')[2].strip()
                results["sensor5-pdr"].append(float(sensor5_pdr))
            elif "SENSOR 06:00 -- ACTUATION PDR" in line:
                # Line: SENSOR 06:00 -- ACTUATION PDR: 0.000
                sensor6_pdr = line.split(':')[2].strip()
                results["sensor6-pdr"].append(float(sensor6_pdr))
            # Extra case to trigger testbed notation
            elif "SENSOR f7:e1 -- ACTUATION PDR" in line:
                # Line: SENSOR f7:e1 -- ACTUATION PDR: 0.000
                sensor6_pdr = line.split(':')[2].strip()
                results["sensor6-pdr"].append(float(sensor6_pdr))
                testbed = True

# Recreate document and save results to a csv
with open(folder_name + "/" + mergename + "-results-summary.json", 'w') as csvfile:
    json.dump(results, csvfile)

# Calculate averages
for key in results:
    results[key] = sum(results[key]) / len(results[key])

with open(folder_name + "/" + mergename + "-results.log", "w") as logfile:
    logfile.write(f"""Namespace(logfile='{mergename}.log', testbed=False)
Logfile: {mergename}.log
Cooja simulation (merged stats out of {len(fragments)} fragments)

----- Duty Cycle Stats -----

AVERAGE DUTY CYCLE: {results["avg_duty_cycle"]:.3f}%
STANDARD DEVIATION: {results["std_dev"]:.3f}%
MINIMUM: {results["min_duty_cycle"]:.3f}%
MAXIMUM: {results["max_duty_cycle"]:.3f}%

----- Reliability Stats -----

# EVENTS AT CONTROLLER: {results["events_at_controller"]:.3f}
# COLLECT ROUNDS AT CONTROLLER: {results["collected_rounds_at_controller"]:.3f}
# FAILED EVENTS: {results["failed_events"]:.3f}

COLLECT PDR: {results["collect_pdr"]:.3f}

# COMMANDS GENERATED BY THE CONTROLLER: {results["commands_gen_controller"]:.3f}
# COMMANDS RECEIVED BY ACTUATORS: {results["commands_recv_actuator"]:.3f}
AVERAGE ACTUATION PDR: {results["avg_actuation_pdr"]:.3f}

SENSOR {"02:00" if not testbed else "f2:33"} -- ACTUATION PDR: {results["sensor2-pdr"]:.3f}
SENSOR {"03:00" if not testbed else "f3:84"} -- ACTUATION PDR: {results["sensor3-pdr"]:.3f}
SENSOR {"04:00" if not testbed else "f3:88"} -- ACTUATION PDR: {results["sensor4-pdr"]:.3f}
SENSOR {"05:00" if not testbed else "f3:8b"} -- ACTUATION PDR: {results["sensor5-pdr"]:.3f}
SENSOR {"06:00" if not testbed else "f7:e1"} -- ACTUATION PDR: {results["sensor6-pdr"]:.3f}
""")

# Energest
energest_lines = []
for fragment in fragments:
    fragname = fragment.split('.')[0]
    with open(folder_name + "/" + fragname + "/" + fragname + "-energest-merge.csv", 'r') as f:
        lines = f.readlines()[1:]
        for line in lines:
            energest_lines.append("0," + line.replace("\n", ""))

with open(folder_name + "/" + mergename + "-energest.csv", 'w') as f:
    f.write("time,node,cnt,cpu,lpm,tx,rx\n")
    f.write("\n".join(energest_lines))

os.system('python3 parse-energest.py ' + folder_name + "/" + mergename + "-energest.csv")
os.system('trash ' + folder_name + "/" + mergename + "-energest.csv")

# DC
dc = {}
for fragment in fragments:
    fragname = fragment.split('.')[0]
    with open(folder_name + "/" + fragname + "/" + fragname + "-dc.csv", 'r') as f:
        lines = f.readlines()[1:]
        for line in lines:
            fields = line.split(',')
            node = int(float(fields[0]))
            if node not in dc:
                dc[node] = [float(fields[1])]
            else:
                dc[node].append(float(fields[1]))

# Calculate the average
for node in dc:
    dc[node] = sum(dc[node]) / len(dc[node])

with open(folder_name + "/" + mergename + "-dc.csv", 'w') as f:
    f.write("node,dc\n")
    f.write("\n".join("{},{}".format(node, dc[node]) for node in dc))

